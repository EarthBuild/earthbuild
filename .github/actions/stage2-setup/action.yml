name: stage2 setup
description: copies earthly binary from stage1 of build, and bootstrap
author: Earthly technologies
inputs:
  BUILT_EARTHLY_PATH:
    description: "Path to the built earthly binary"
    required: true
  BINARY:
    description: "The container engine to use (e.g., 'docker' or 'podman')"
    required: true
  SUDO:
    description: "Sudo command if needed"
    required: false
  USE_QEMU:
    description: "Whether to set up QEMU"
    required: false
  USE_SATELLITE:
    description: "Whether to use an Earthly satellite"
    required: false
    default: "false"
  USE_NEXT:
    description: "Whether to use earthly-next"
    required: false
    default: "false"
  SATELLITE_NAME:
    description: "Name of the satellite to use"
    required: false
  EARTHLY_ORG:
    description: "The Earthly organization"
    required: false
  DOCKERHUB_USERNAME:
    description: "Docker Hub username"
    required: true
  DOCKERHUB_PASSWORD:
    description: "Docker Hub password/token"
    required: true
  EARTHLY_TOKEN:
    description: "Earthly cloud token"
    required: true

runs:
  using: "composite"
  steps:
    - if: inputs.BINARY == 'docker'
      uses: docker/setup-qemu-action@v3
      with:
        image: tonistiigi/binfmt:latest
        platforms: all
    - uses: actions/setup-go@v5
      with:
        go-version: 1.21
    - if: ${{ inputs.BINARY == 'podman' }}
      run: |-
        echo "Setting up podman"
        ${{inputs.SUDO}} apt-get purge docker-engine docker docker.io docker-ce docker-ce-cli ; ${{inputs.SUDO}} rm -rf /usr/bin/docker
        ${{inputs.SUDO}} apt-get update && ${{inputs.SUDO}} apt-get install -y podman && ${{inputs.SUDO}} rm -f /etc/containers/registries.conf
        podman version && podman info && podman info --debug
      shell: bash
    - if: ${{ inputs.BINARY == 'podman' && inputs.USE_QEMU }}
      # qemu-user-static needed for cross-compilation (--platform) targets
      run: ${{inputs.SUDO}} apt-get update && ${{inputs.SUDO}} apt-get install -y qemu-user-static
      shell: bash
    - if: ${{ inputs.BINARY == 'docker' }}
      run: ${{inputs.SUDO}} ${{inputs.BINARY}} login  --username "${{ inputs.DOCKERHUB_USERNAME }}" --password "${{ inputs.DOCKERHUB_PASSWORD }}"
      shell: bash
    - if: ${{ inputs.BINARY != 'docker' }}
      run: ${{inputs.SUDO}} ${{inputs.BINARY}} login docker.io --username "${{ inputs.DOCKERHUB_USERNAME }}" --password "${{ inputs.DOCKERHUB_PASSWORD }}"
      shell: bash
    - run: |-
        echo "Extracting earthly binary from stage1 of build"
        export TAG=${GITHUB_SHA}-ubuntu-latest-${{inputs.BINARY}}
        if [ "${{inputs.USE_NEXT}}" = "true" ]; then export TAG="$TAG-ticktock"; fi
        BUILDKITD_IMAGE=docker.io/earthly/buildkitd-staging ${{inputs.SUDO}} ./earthly upgrade
        ${{inputs.SUDO}} chown -R $USER ~/.earthly # restore non-sudo user ownership
        test -n "${{inputs.BUILT_EARTHLY_PATH}}" || (echo "BUILT_EARTHLY_PATH is empty" && exit 1)
        mkdir -p $(dirname "${{inputs.BUILT_EARTHLY_PATH}}")
        ${{inputs.SUDO}} ls "${HOME}/.earthly/"
        ${{inputs.SUDO}} mv "${HOME}/.earthly/earthly-$TAG" "${{inputs.BUILT_EARTHLY_PATH}}"
        echo "extracted ${{inputs.BUILT_EARTHLY_PATH}}"
      shell: bash
    - if: ${{ inputs.USE_NEXT == 'true' }}
      run: |-
        export expected_buildkit_client_sha="$(cat earthly-next | head -c 12)"
        test -n "$expected_buildkit_client_sha" || ( echo "expected_buildkit_client_sha is empty" && exit 1)
        (strings ${{inputs.BUILT_EARTHLY_PATH}} | grep "$expected_buildkit_client_sha" ) || ( echo "expected to find $expected_buildkit_client_sha in earthly binary" && exit 1)
        echo "correctly found $expected_buildkit_client_sha in earthly binary; this confirms earthly-next was used"
      shell: bash
    - if: ${{ inputs.BINARY == 'podman' }}
      run: ${{inputs.SUDO}} ${{inputs.BUILT_EARTHLY_PATH}} bootstrap
      shell: bash
    - if: ${{ inputs.USE_SATELLITE == 'true' }}
      run: |-
        SATELLITE_NAME=${{inputs.SATELLITE_NAME}}
        if [ "$SATELLITE_NAME" = "core-test" ]; then
          SATELLITE_NAME="$SATELLITE_NAME-$(( $RANDOM % 4 ))"
          echo "Using core-test satellite: $SATELLITE_NAME"
        fi
        ${{inputs.SUDO}} ${{inputs.BUILT_EARTHLY_PATH}} sat ls
        ${{inputs.SUDO}} ${{inputs.BUILT_EARTHLY_PATH}} satellite select $SATELLITE_NAME
      shell: bash
    - run: echo "stage2-setup action complete"
      shell: bash
