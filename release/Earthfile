VERSION 0.8
FROM alpine:3.18

RUN apk add --update --no-cache \
    curl python3 py3-requests

release:
    COPY ensure_gha_passing.py /bin/ensure_gha_passing
    ARG EARTHLY_GIT_HASH
    ARG --required RELEASE_TAG
    ARG SKIP_GHA_CHECK
    ARG PRERELEASE="false"
    IF --no-cache test -n "$SKIP_GHA_CHECK" || ensure_gha_passing --sha $EARTHLY_GIT_HASH
        BUILD +release-dockerhub --RELEASE_TAG="$RELEASE_TAG"
        BUILD +release-github --RELEASE_TAG="$RELEASE_TAG" --PRERELEASE="$PRERELEASE"
    ELSE
        RUN echo "github status check failed; to force the release without performing this check, set --build-arg SKIP_GHA_CHECK=1"
    END

release-dockerhub:
    ARG --required RELEASE_TAG
    ARG DOCKERHUB_USER="earthly"
    ARG DOCKERHUB_IMG="earthly"
    ARG DOCKERHUB_BUILDKIT_IMG="buildkitd"
    ARG PUSH_LATEST_TAG="false"
    ARG PUSH_PRERELEASE_TAG="false"
    BUILD +perform-release-dockerhub \
          --RELEASE_TAG="$RELEASE_TAG" \
          --DOCKERHUB_USER="$DOCKERHUB_USER" \
          --DOCKERHUB_IMG="$DOCKERHUB_IMG" \
          --DOCKERHUB_BUILDKIT_IMG="$DOCKERHUB_BUILDKIT_IMG" \
          --PUSH_LATEST_TAG="$PUSH_LATEST_TAG" \
          --PUSH_PRERELEASE_TAG="$PUSH_PRERELEASE_TAG"

perform-release-dockerhub:
    ARG --required RELEASE_TAG
    ARG --required PUSH_LATEST_TAG
    ARG --required PUSH_PRERELEASE_TAG
    ARG --required DOCKERHUB_USER
    ARG --required DOCKERHUB_IMG
    ARG --required DOCKERHUB_BUILDKIT_IMG
    BUILD +perform-release-earthly-dockerhub
    BUILD +perform-release-buildkitd-dockerhub

perform-release-earthly-dockerhub:
    ARG --required RELEASE_TAG
    ARG --required PUSH_LATEST_TAG
    ARG --required PUSH_PRERELEASE_TAG
    ARG --required DOCKERHUB_USER
    ARG --required DOCKERHUB_IMG
    ARG --required DOCKERHUB_BUILDKIT_IMG
    ARG BUILDKIT_PROJECT
    BUILD \
        --platform=linux/amd64 \
        --platform=linux/arm64 \
        ../+earthly-docker \
        --TAG="$RELEASE_TAG" \
        --DOCKERHUB_USER="$DOCKERHUB_USER" \
        --DOCKERHUB_IMG="$DOCKERHUB_IMG" \
        --PUSH_LATEST_TAG="$PUSH_LATEST_TAG" \
        --PUSH_PRERELEASE_TAG="$PUSH_PRERELEASE_TAG" \
        --BUILDKIT_PROJECT="$BUILDKIT_PROJECT"

perform-release-buildkitd-dockerhub:
    ARG --required RELEASE_TAG
    ARG --required PUSH_LATEST_TAG
    ARG --required PUSH_PRERELEASE_TAG
    ARG --required DOCKERHUB_USER
    ARG --required DOCKERHUB_IMG
    ARG --required DOCKERHUB_BUILDKIT_IMG
    ARG BUILDKIT_PROJECT
    BUILD \
        --platform=linux/amd64 \
        --platform=linux/arm64 \
        ../buildkitd+buildkitd \
        --TAG="$RELEASE_TAG" \
        --DOCKERHUB_USER="$DOCKERHUB_USER" \
        --DOCKERHUB_BUILDKIT_IMG="$DOCKERHUB_BUILDKIT_IMG" \
        --BUILDKIT_PROJECT="$BUILDKIT_PROJECT"

release-notes:
    FROM ..+changelog-parser
    ARG --required RELEASE_TAG
    RUN changelogparser --changelog CHANGELOG.md --version "$RELEASE_TAG" > notes.txt
    ARG SKIP_CHANGELOG_DATE_TEST="false"
    IF [ "$SKIP_CHANGELOG_DATE_TEST" != "true" ]
        RUN --no-cache test "$(changelogparser --changelog CHANGELOG.md --version "$RELEASE_TAG" --date)" = "$(date "+%Y-%m-%d")"
    END
    SAVE ARTIFACT notes.txt

# signed-release creates the release directory containing binaries for all archs and platforms plus release
# notes and GPG signatures to later zip and upload to github
signed-release:
    FROM alpine:3.20

    RUN apk add file gpg gpg-agent

    ARG --required GITHUB_USER
    ARG --required EARTHLY_REPO
    ARG --required DOCKERHUB_HOST
    ARG --required DOCKERHUB_USER
    ARG --required DOCKERHUB_BUILDKIT_IMG
    ARG --required PRERELEASE

    ARG EARTHLY_GIT_HASH

    COPY (../+earthly-all/* \
         --VERSION=$RELEASE_TAG \
         --DEFAULT_BUILDKITD_IMAGE="$DOCKERHUB_HOST/$DOCKERHUB_USER/$DOCKERHUB_BUILDKIT_IMG:$RELEASE_TAG" \
         --DEFAULT_INSTALLATION_NAME="earthly" \
         ) ./release/


    RUN test -f ./release/earthly-linux-amd64 && \
        test -f ./release/earthly-darwin-amd64 && \
        test -f ./release/earthly-darwin-arm64 && \
        test -f ./release/earthly-linux-arm64 && \
        test -f ./release/earthly-windows-amd64.exe

    RUN file ./release/earthly-linux-amd64 | grep "x86-64"
    RUN file ./release/earthly-linux-amd64 | grep "ELF 64-bit"
    RUN file ./release/earthly-darwin-amd64 | grep "Mach-O 64-bit x86_64"
    RUN file ./release/earthly-darwin-arm64 | grep "Mach-O 64-bit arm64"
    RUN file ./release/earthly-linux-arm64 | grep "aarch64"
    RUN file ./release/earthly-linux-arm64 | grep "ELF 64-bit"
    RUN file ./release/earthly-windows-amd64.exe | grep "PE32"

    # GPG Sign
    # TODO generate and share an earthbuild org GPG key. Determine how to provide secret
    RUN --secret GPG_PRIVATE echo "${GPG_PRIVATE}" | gpg --import && \
        cd release && sha256sum earthly-* > checksum && \
        cat checksum | gpg --default-key earthly-apt -abs --clearsign --no-emit-version > checksum.asc && rm checksum

    SAVE ARTIFACT ./release AS LOCAL ./release

gh-cli:
    FROM alpine:3.20

    RUN apk add --no-cache ca-certificates curl tar jq git bash && update-ca-certificates
    
    RUN apk add --no-cache github-cli

gh-auth-debug:
    FROM +gh-cli
    ARG GITHUB_USER="earthbuild"
    ARG EARTHLY_REPO="earthbuild-staging"
    RUN \
        --secret GITHUB_TOKEN \
        set -euo pipefail; \
        test -n "$GITHUB_TOKEN"; \
        export GH_TOKEN="$GITHUB_TOKEN"; \
        gh --version; \
        gh api "repos/$GITHUB_USER/$EARTHLY_REPO" -q .full_name >/dev/null

# TODO: this is unused for now. Shortly it will be refactored to no longer build artifacts itself. Rather just
# upload existing artifacts stored in GitHub actions to a specified release using `gh release upload`.
release-artifacts-to-gh:
    FROM +gh-cli

    # Built-ins: Full commit SHA, First 8 of commit SHA
    ARG EARTHLY_GIT_HASH

    # Default to earthly-inferred commit SHA but accept an override
    ARG COMMIT_SHA="$EARTHLY_GIT_HASH"
    
    # Trim COMMIT_SHA to first 8 chars (alpine)
    LET ARTIFACT_NAME="$(echo $COMMIT_SHA | cut -c1-8)"

    RUN mkdir -p _download

    # Download artifact previously built by ci-staging-deploy.yml "Create Release Binaries"
    RUN --secret GH_TOKEN gh run download \
        --commit "${COMMIT_SHA}" \
        --name "${ARTIFACT_NAME}" \
        --dir _download

    # The release tag (vX.X.X) that we're running for
    ARG --required RELEASE_TAG

    # Upload all binary artifacts to the existing release. This target is meant to be triggered by creating a
    # release in GitHub
    RUN --push --secret GH_TOKEN find _download -type f -print0 | xargs -0 -n1 -I{} gh release upload "${RELEASE_TAG}" "{}" --clobber

release-homebrew:
    RUN apk add --update --no-cache \
        bash \
        bash-completion \
        binutils \
        ca-certificates \
        coreutils \
        curl \
        findutils \
        g++ \
        git \
        grep \
        less \
        make \
        openssl \
        openssh \
        util-linux
    RUN apk add --update --no-cache --repository=http://dl-cdn.alpinelinux.org/alpine/edge/testing hub

    # Deps and preconditions.
    ARG --required RELEASE_TAG
    ARG GIT_USERNAME="littleredcorvette"
    ARG GIT_NAME="littleredcorvette"
    ARG GIT_EMAIL="littleredcorvette@users.noreply.github.com"
    ARG --required GITHUB_USER
    ARG --required BREW_REPO
    ARG --required EARTHLY_REPO
    ARG EARTHLY_GIT_HASH
    WORKDIR /earthly/homebrew-earthly

    RUN git config --global user.name "$GIT_NAME" && \
        git config --global user.email "$GIT_EMAIL"

    # load in github.com's public key (fetched by running: ssh-keyscan -H github.com)
    # you can also get them from https://api.github.com/meta
    RUN mkdir -p /root/.ssh
    RUN echo "|1|M66Uwae8fx9M5JFDd+WyVi3dERM=|LKfAmECF1kHoZ6epHR5jtPhJgic= ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCj7ndNxQowgcQnjshcLrqPEiiphnt+VTTvDP6mHBL9j1aNUkY4Ue1gvwnGLVlOhGeYrnZaMgRK6+PKCUXaDbC7qtbW8gIkhL7aGCsOr/C56SJMy/BCZfxd1nWzAOxSDPgVsmerOBYfNqltV9/hWCqBywINIR+5dIg6JTJ72pcEpEjcYgXkE2YEFXV1JHnsKgbLWNlhScqb2UmyRkQyytRLtL+38TGxkxCflmO+5Z8CSSNY7GidjMIZ7Q4zMjA2n1nGrlTDkzwDCsw+wqFPGQA179cnfGWOWRVruj16z6XyvxvjJwbz0wQZ75XK5tKSb7FNyeIEs4TT4jk+S4dhPeAUC5y+bDYirYgM4GC7uEnztnZyaVWQ7B381AK4Qdrwt51ZqExKbQpTUNn+EjqoTwvqNj4kqx5QUCI0ThS/YkOxJCXmPUWZbhjpCg56i+2aB6CmK2JGhn57K5mj0MNdBXA4/WnwH6XoPWJzK5Nyu2zB3nAZp+S5hpQs+p1vN1/wsjk=" > /root/.ssh/known_hosts

    RUN --mount type=secret,id=littleredcorvette-id_rsa,target=/root/id_rsa --no-cache \
        eval $(ssh-agent) && \
        cat /root/id_rsa | ssh-add - && \
        git clone "git@github.com:$GITHUB_USER/$BREW_REPO.git" .
    # Make the change in a new branch.
    ARG RELEASE_BRANCH="release-$RELEASE_TAG"
    RUN git switch -c "$RELEASE_BRANCH"

    RUN sed -i \
        -e 's^\(tag: \+\)"v[0-9.]\+"\(,\?\)$^\1"'$RELEASE_TAG'"\2^' \
        -e 's^\(revision: \+\)"[0-9a-f]\+"\(,\?\)$^\1"'$EARTHLY_GIT_HASH'"\2^' \
        ./Formula/earthly.rb
    RUN echo "Diff:" && git diff
    RUN version=${RELEASE_TAG#v} ;\
        echo version=$version ;\
        git commit -a --allow-empty -m "earthly $version"

    RUN --mount type=secret,id=littleredcorvette-id_rsa,target=/root/id_rsa \
        --secret SLACK_WEBHOOK_URL=slack-release-webhook \
        --push \
        eval $(ssh-agent) && \
        cat /root/id_rsa | ssh-add - && \
        git push --force --set-upstream origin "$RELEASE_BRANCH" && \
        if [ "$BREW_REPO" = "homebrew-earthly" ] && [ "$GITHUB_USER" = "earthly" ]; then \
            curl -s -X POST -H 'Content-type: application/json' --data '{"text":"Successfully pushed release branch: https://github.com/earthly/homebrew-earthly/tree/'$RELEASE_BRANCH' (this branch will be automatically deleted via GHA once GHA deploy task finishes)"}' "$SLACK_WEBHOOK_URL"; \
        fi

release-repo:
    ARG --required RELEASE_TAG
    BUILD ./apt-repo+build-and-release --RELEASE_TAG="$RELEASE_TAG"
    BUILD ./yum-repo+build-and-release --RELEASE_TAG="$RELEASE_TAG"
