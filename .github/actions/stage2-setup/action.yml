name: "Stage 2 Setup"
description: "Setup for self-hosted earthbuild runners"
inputs:
  earthbuild_version:
    description: "The earthbuild version to use"
    required: false
    default: "latest"
  built_earthbuild_path:
    description: "Path to the built earthbuild binary"
    required: true
  BINARY:
    description: "The container engine to use (e.g., 'docker' or 'podman')"
    required: true
  SUDO:
    description: "Sudo command if needed"
    required: false
  USE_QEMU:
    description: "Whether to set up QEMU"
    required: false
  USE_NEXT:
    description: "Whether to use earthbuild-next"
    required: false
    default: "false"
  earthbuild_org:
    description: "The earthbuild organization"
    required: false
  EARTHBUILD_TOKEN:
    description: "earthbuild token (legacy - not used with GCR mirror)"
    required: false
  GHCR_USERNAME:
    description: "GHCR username (legacy - now uses github.actor)"
    required: false
  GHCR_PASSWORD:
    description: "GHCR password (legacy - now uses GITHUB_TOKEN)"
    required: false
  DOCKERHUB_USERNAME:
    description: "Docker Hub username (legacy - not needed with GCR mirror)"
    required: false
  DOCKERHUB_PASSWORD:
    description: "Docker Hub password (legacy - not needed with GCR mirror)"
    required: false
  DOCKERHUB_MIRROR_USERNAME:
    description: "Docker Hub mirror username (legacy - GCR mirror is public)"
    required: false
  DOCKERHUB_MIRROR_PASSWORD:
    description: "Docker Hub mirror password (legacy - GCR mirror is public)"
    required: false

runs:
  using: "composite"
  steps:
    - name: Unset CI
      shell: bash
      run: |
        unset CI
    - name: Login to GHCR
      if: inputs.BINARY == 'docker'
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ env.GITHUB_TOKEN }}
    - if: inputs.BINARY == 'docker'
      uses: docker/setup-qemu-action@v3
      with:
        image: tonistiigi/binfmt:latest
        platforms: all
    - uses: actions/setup-go@v5
      with:
        go-version: 1.21
    - if: ${{ inputs.BINARY == 'podman' }}
      run: |-
        echo "Setting up podman"
        ${{inputs.SUDO}} apt-get purge docker-engine docker docker.io docker-ce docker-ce-cli ; ${{inputs.SUDO}} rm -f /usr/bin/docker
        ${{inputs.SUDO}} apt-get update && ${{inputs.SUDO}} apt-get install -y podman && ${{inputs.SUDO}} rm -f /etc/containers/registries.conf
        podman version && podman info && podman info --debug
      shell: bash
    - if: ${{ inputs.BINARY == 'podman' && inputs.USE_QEMU }}
      # qemu-user-static needed for cross-compilation (--platform) targets
      run: ${{inputs.SUDO}} apt-get update && ${{inputs.SUDO}} apt-get install -y qemu-user-static
      shell: bash
    - run: |-
        echo "Extracting earthbuild binary from stage1 of build"
        export TAG=${GITHUB_SHA}-ubuntu-latest-${{inputs.BINARY}}
        if [ "${{inputs.USE_NEXT}}" = "true" ]; then export TAG="$TAG-ticktock"; fi
        ${{inputs.SUDO}} ./earthbuild upgrade
        ${{inputs.SUDO}} chown -R $USER ~/.earthbuild # restore non-sudo user ownership
        test -n "${{inputs.built_earthbuild_path}}" || (echo "built_earthbuild_path is empty" && exit 1)
        mkdir -p $(dirname "${{inputs.built_earthbuild_path}}")
        ${{inputs.SUDO}} ls "${HOME}/.earthbuild/"
        ${{inputs.SUDO}} mv "${HOME}/.earthbuild/earthbuild-$TAG" "${{inputs.built_earthbuild_path}}"
        echo "extracted ${{inputs.built_earthbuild_path}}"
      shell: bash
    - run: |-
        echo "Configuring earthbuild to use GCR mirror"
        ${{inputs.built_earthbuild_path}} config global.buildkit_additional_config "'[registry.\"docker.io\"]
        mirrors = [\"mirror.gcr.io\"]'"
      shell: bash
    - if: ${{ inputs.USE_NEXT == 'true' }}
      run: |-
        export expected_buildkit_client_sha="$(cat earthbuild-next | head -c 12)"
        test -n "$expected_buildkit_client_sha" || ( echo "expected_buildkit_client_sha is empty" && exit 1)
        (strings ${{inputs.built_earthbuild_path}} | grep "$expected_buildkit_client_sha" ) || ( echo "expected to find $expected_buildkit_client_sha in earthbuild binary" && exit 1)
        echo "correctly found $expected_buildkit_client_sha in earthbuild binary; this confirms earthbuild-next was used"
      shell: bash
    - if: ${{ inputs.BINARY == 'podman' }}
      run: ${{inputs.SUDO}} ${{inputs.built_earthbuild_path}} bootstrap
      shell: bash
    - run: echo "stage2-setup action complete"
      shell: bash
